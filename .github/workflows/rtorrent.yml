name: rTorrent

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: true
        default: '0.15.0'

env:
  REGISTRY_IMAGE: gists/rtorrent
  IMAGE_NAME: rtorrent

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          - linux/386
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
          - linux/ppc64le
          - linux/riscv64
          - linux/s390x
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        id: prepare
        run: |
          platform=${{ matrix.architecture }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "build_args=VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "image-name=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ steps.prepare.outputs.version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.image-name }}
          file: ./${{ env.image-name }}/Dockerfile
          platforms: ${{ matrix.architecture }}
          build-args: ${{ env.build_args }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            ${{ needs.build.outputs.version }}
            latest
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Manifest create and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
